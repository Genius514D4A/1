---
# This role will install Kafka with Zookeeper in group 'kafka' in the environment inventory

- name: "pull the zookeeper:{{ zookeeper.version }} image"
  shell: "docker pull zookeeper:{{ zookeeper.version }}"
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: (re)start zookeeper
  docker_container:
    name: zookeeper
    image: zookeeper:{{ zookeeper.version }}
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    env:
        ZOO_MY_ID: "{{ groups['kafkas'].index(inventory_hostname) + 1 }}"
        ZOO_SERVERS: "{% set zhosts = [] %}
                      {% for host in groups['kafkas'] %}
                        {% if host == inventory_hostname %}
                          {{ zhosts.append('server.' + (loop.index|string) + '=' + '0.0.0.0:2888:3888') }}
                        {% else %}
                          {{ zhosts.append('server.' + (loop.index|string) + '=' + host + ':2888:3888') }}
                        {% endif %}
                      {% endfor %}
                      {{ zhosts | join(' ') }}"
    ports:
      - "{{ zookeeper.port }}:2181"
      - "2888:2888"
      - "3888:3888"

- name: wait until the Zookeeper in this host is up and running
  action: shell (echo ruok; sleep 1) | nc {{ inventory_hostname }} {{ zookeeper.port }}
  register: result
  until: (result.rc == 0) and (result.stdout == 'imok')
  retries: 36
  delay: 5

- name: "pull the ches/kafka:{{ kafka.version }} image"
  shell: "docker pull ches/kafka:{{ kafka.version }}"
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: (re)start kafka
  docker_container:
    name: kafka
    image: ches/kafka:{{ kafka.version }}
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    links:
      - "zookeeper:zookeeper"
    env:
      "KAFKA_BROKER_ID": "{{ groups['kafkas'].index(inventory_hostname) }}"
      "KAFKA_ADVERTISED_HOST_NAME": "{{ inventory_hostname }}"
      "KAFKA_HEAP_OPTS": "-Xmx{{ kafka.heap }} -Xms{{ kafka.heap }}"
    ports:
      - "{{ kafka.port }}:9092"

- name: wait until the kafka server started up
  shell: docker logs kafka
  register: result
  until: (('[Kafka Server ' + (groups['kafkas'].index(inventory_hostname)|string) + '], started') in result.stdout)
  retries: 10
  delay: 5

- name: create the health topic
  shell: "docker exec kafka bash -c 'unset JMX_PORT; kafka-topics.sh --create --topic health --replication-factor {{ kafka.replicationFactor }} --partitions 1 --zookeeper {{ inventory_hostname }}:{{ zookeeper.port }} --config retention.bytes={{ kafka.topics.health.retentionBytes }} --config retention.ms={{ kafka.topics.health.retentionMS }} --config segment.bytes={{ kafka.topics.health.segmentBytes }}'"
  register: command_result
  failed_when: "not ('Created topic' in command_result.stdout or 'already exists' in command_result.stdout)"
  changed_when: "'Created topic' in command_result.stdout"
  when: groups['kafkas'].index(inventory_hostname ) == 0

- name: create the active-ack topics
  shell: "docker exec kafka bash -c 'unset JMX_PORT; kafka-topics.sh --create --topic completed{{ item.0 }} --replication-factor {{ kafka.replicationFactor }} --partitions 1 --zookeeper {{ inventory_hostname }}:{{ zookeeper.port }} --config retention.bytes={{ kafka.topics.completed.retentionBytes }} --config retention.ms={{ kafka.topics.completed.retentionMS }} --config segment.bytes={{ kafka.topics.completed.segmentBytes }}'"
  with_indexed_items: "{{ groups['controllers'] }}"
  register: command_result
  failed_when: "not ('Created topic' in command_result.stdout or 'already exists' in command_result.stdout)"
  changed_when: "'Created topic' in command_result.stdout"
  when: groups['kafkas'].index(inventory_hostname ) == 0

- name: create the invoker topics
  shell: "docker exec kafka bash -c 'unset JMX_PORT; kafka-topics.sh --create --topic invoker{{ item.0 }} --replication-factor {{ kafka.replicationFactor }} --partitions 1 --zookeeper {{ inventory_hostname }}:{{ zookeeper.port }} --config retention.bytes={{ kafka.topics.invoker.retentionBytes }} --config retention.ms={{ kafka.topics.invoker.retentionMS }} --config segment.bytes={{ kafka.topics.invoker.segmentBytes }}'"
  with_indexed_items: "{{ groups['invokers'] }}"
  register: command_result
  failed_when: "not ('Created topic' in command_result.stdout or 'already exists' in command_result.stdout)"
  changed_when: "'Created topic' in command_result.stdout"
  when: groups['kafkas'].index(inventory_hostname ) == 0

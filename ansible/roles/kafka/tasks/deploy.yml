---
# This role will install Kafka with Zookeeper in group 'kafka' in the environment inventory

- name: Set the zookeeper and kafka docker image names
  set_fact:
    zookeeper_image: "{{ zookeeper.docker_image | default('zookeeper:' ~ zookeeper.version ) }}"
    kafka_image: "{{ kafka.docker_image | default ('ches/kafka:' ~ kafka.version) }}"

- name: "pull the {{ zookeeper_image }} image"
  shell: "docker pull {{ zookeeper_image }}"
  retries: 3
  delay: "{{ docker.pull.delay }}"

- name: (re)start zookeeper
  docker_container:
    name: zookeeper
    image: "{{ zookeeper_image }}"
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    ports:
      - "{{ zookeeper.port }}:2181"
  register: zookeeper_container

- name: wait until the Zookeeper in this host is up and running
  action: shell (echo ruok; sleep 1) | nc {{ ansible_host }} {{ zookeeper.port }}
  register: result
  until: (result.rc == 0) and (result.stdout == 'imok')
  retries: 36
  delay: 5

- name: "pull the {{ kafka_image }} image"
  shell: "docker pull {{ kafka_image }}"
  retries: "{{ docker.pull.retries }}"
  delay: "{{ docker.pull.delay }}"

- name: (re)start kafka
  docker_container:
    name: kafka
    image: "{{ kafka_image }}"
    state: started
    recreate: true
    restart_policy: "{{ docker.restart.policy }}"
    env:
      "KAFKA_ADVERTISED_HOST_NAME": "{{ ansible_host }}"
      "KAFKA_HEAP_OPTS": "-Xmx{{ kafka.heap }} -Xms{{ kafka.heap }}"
      "ZOOKEEPER_CONNECTION_STRING": "{{ ansible_host }}:2181"
    ports:
      - "{{ kafka.port }}:9092"

- name: wait until the kafka server started up
  shell: docker logs kafka
  register: result
  until: ('[Kafka Server 0], started' in result.stdout)
  retries: 10
  delay: 5

- name: create the health and the cacheInvalidation topic
  shell: "docker exec kafka bash -c 'unset JMX_PORT; kafka-topics.sh --create --topic {{ item.name }} --replication-factor 1 --partitions 1 --zookeeper {{ ansible_host }}:{{ zookeeper.port }} --config retention.bytes={{ item.settings.retentionBytes }} --config retention.ms={{ item.settings.retentionMS }} --config segment.bytes={{ item.settings.segmentBytes }}'"
  register: command_result
  failed_when: "not ('Created topic' in command_result.stdout or 'already exists' in command_result.stdout)"
  changed_when: "'Created topic' in command_result.stdout"
  with_items:
  - name: health
    settings: "{{ kafka.topics.health }}"
  - name: cacheInvalidation
    settings: "{{ kafka.topics.cacheInvalidation }}"

- name: create the active-ack topics
  shell: "docker exec kafka bash -c 'unset JMX_PORT; kafka-topics.sh --create --topic completed{{ item.0 }} --replication-factor 1 --partitions 1 --zookeeper {{ ansible_host }}:{{ zookeeper.port }} --config retention.bytes={{ kafka.topics.completed.retentionBytes }} --config retention.ms={{ kafka.topics.completed.retentionMS }} --config segment.bytes={{ kafka.topics.completed.segmentBytes }}'"
  with_indexed_items: "{{ groups['controllers'] }}"
  register: command_result
  failed_when: "not ('Created topic' in command_result.stdout or 'already exists' in command_result.stdout)"
  changed_when: "'Created topic' in command_result.stdout"

- name: create the invoker topics
  shell: "docker exec kafka bash -c 'unset JMX_PORT; kafka-topics.sh --create --topic invoker{{ item.0 }} --replication-factor 1 --partitions 1 --zookeeper {{ ansible_host }}:{{ zookeeper.port }} --config retention.bytes={{ kafka.topics.invoker.retentionBytes }} --config retention.ms={{ kafka.topics.invoker.retentionMS }} --config segment.bytes={{ kafka.topics.invoker.segmentBytes }}'"
  with_indexed_items: "{{ groups['invokers'] }}"
  register: command_result
  failed_when: "not ('Created topic' in command_result.stdout or 'already exists' in command_result.stdout)"
  changed_when: "'Created topic' in command_result.stdout"

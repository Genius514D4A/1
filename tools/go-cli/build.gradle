ext.dockerImageName = "whisk/go-cli"
ext.dockerContainerName = "go-cli"
ext.dockerBuildArgs = getDockerBuildArgs()
apply from: "../../docker.gradle"

// Detects if the local OS is Unix. If so, ant.properties.family is set to linux.
ant.condition(property: "family", value: "linux") {
    os(family: "unix")
}

// Detects if the local OS is Mac. If so, ant.properties.family is set to mac.
ant.condition(property: "family", value: "mac") {
    os(family: "mac")
}

// Detects if the local CPU architecture is amd64. If so, ant.properties.arch is set to amd64.
ant.condition(property: "arch", value: "amd64") {
    os(arch: "amd64")
}

// Detects if the local CPU architecture is x86_64. If so, ant.properties.arch is set to amd64.
ant.condition(property: "arch", value: "amd64") {
    os(arch: "x86_64")
}

// Detects if the local CPU architecture is 386. If so, ant.properties.arch is set to 386.
ant.condition(property: "arch", value: "386") {
    os(arch: "386")
}

// Detects if the local CPU architecture is i386. If so, ant.properties.arch is set to 386.
ant.condition(property: "arch", value: "386") {
    os(arch: "i386")
}

// Detects if the local CPU architecture is x86_32. If so, ant.properties.arch is set to 386.
ant.condition(property: "arch", value: "386") {
    os(arch: "x86_32")
}

// Returns the Go CLI docker build args
def getDockerBuildArgs() {
    java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
    String dateStr = sdf.format(new Date())
    return "BUILDTIME="+dateStr
}

task removeBinary(type: Delete) {
    delete "${projectDir}/../../bin/go-cli"
}

task distBinary(dependsOn: [removeBinary, distDocker]) << {
    run(dockerBinary + ["rm", "-f", dockerContainerName], true)
    run(["mkdir", "${projectDir}/../../bin/go-cli/"])
    run(dockerBinary + ["run", "--name", dockerContainerName, dockerImageName + ":" + dockerImageTag])

    if (ant.properties.family in ["linux", "mac"] && ant.properties.arch in ["amd64", "386"]) {
        run(dockerBinary + ["cp", dockerContainerName +
            ":/src/github.com/go-whisk-cli/${ant.properties.family}/${ant.properties.arch}/wsk",
            "${projectDir}/../../bin/go-cli/wsk"])
    }

    run(dockerBinary + ["rm", "-f", dockerContainerName])
}

distDocker.finalizedBy([removeBinary, distBinary])

def run(cmd, ignoreError = false) {
    println("Executing '${cmd.join(" ")}'")
    def proc = cmd.execute()
    proc.waitFor()
    if(!ignoreError && proc.exitValue() != 0) {
        println("Command '${cmd.join(" ")}' failed with exitCode ${proc.exitValue()}")
    }
}

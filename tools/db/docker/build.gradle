ext {
    dockerImageName = 'couchdb'
    couchdbImage = 'couchdb:1.6'
    couchdbUser = "gradle_admin"
    couchdbPass = "gradle_password"
    couchdbPrefix = "local_"
    ansibleImage = 'williamyeh/ansible:debian8'
    tmp_src = file(gradle.gradleUserHomeDir.getPath() + '/openwhisk').getPath()
}

apply from: '../../../gradle/docker.gradle'

/**
 * Creates a temporary folder used by this build
 */
task setupTmpFolder() {
    doFirst {
        // define a temp file to dump the fresh DB
        def tmp_src_path = gradle.gradleUserHomeDir.getPath() + '/openwhisk'
        new File(tmp_src_path).mkdirs()
        tmp_src = new File(tmp_src_path).getPath()

        // sync the sources to a folder that can be loaded by docker
        def rsync_cmd = ['rsync', '-a', '../../', tmp_src, '--exclude', '.git', '--exclude', 'build', '--exclude', 'tests']
        rsync_cmd.execute().consumeProcessOutput(System.out, System.err)
    }
}
/**
 * Creates one container with CouchDB and executes Ansible playbooks to init DB.
 * Ansible is executed using another container so that the build is not dependent on Ansible.
 */
task exportCleanDB(dependsOn: setupTmpFolder) {
    doFirst {
        // start a docker container with CouchDB
        def db_cmd = dockerBinary + ['run', '-d', '--rm', '--name=gradle_couchdb', '--expose', '5984'] +
                ['-e', 'COUCHDB_USER=' + couchdbUser, '-e', 'COUCHDB_PASSWORD=' + couchdbPass] +
                ['-v', tmp_src + ':/openwhisk'] +
                [couchdbImage]

        // start a docker container to run Ansible playbook that configures CouchDB
        def ansible_cmd = dockerBinary + ['run', '--name=gradle_ansible', '--rm'] +
                ['-v', tmp_src + ':/openwhisk', '-w', '/openwhisk/ansible'] +
                ['--link=gradle_couchdb', '-t', ansibleImage] +
                ['ansible-playbook', 'setup.yml', 'initdb.yml', 'wipe.yml'] +
                ['-e', 'db_username=' + couchdbUser, '-e', 'db_password=' + couchdbPass] +
                ['-e', 'db_host=gradle_couchdb', '-e', 'openwhisk_home=/openwhisk', '-e', 'db_prefix=' + couchdbPrefix]

        println("${new Date()}: Executing '${db_cmd.join(" ")}'")
        println("${new Date()}: Executing '${ansible_cmd.join(" ")}'")
        def timeout = 60
        def db_proc = db_cmd.execute()
        db_proc.consumeProcessOutput(System.out, System.err)
        db_proc.waitForOrKill(timeout * 1000)
        def ansible_proc = ansible_cmd.execute()
        ansible_proc.consumeProcessOutput(System.out, System.err)
        ansible_proc.waitForOrKill(timeout * 1000)

        // dump DBs: local_whisks and subjects
        // execute a curl command inside the CouchDB container and save the output on a shared volume
        def dump_dbs = dockerBinary + ['exec', 'gradle_couchdb'] +
                ['curl', 'http://127.0.0.1:5984/{' + couchdbPrefix + 'whisks,subjects}/_all_docs?include_docs=true&attachments=true', '-o', '/openwhisk/couchdb_#1.json']

        println("${new Date()}: Executing '${dump_dbs.join(" ")}'")
        def dump_dbs_proc = dump_dbs.execute()
        dump_dbs_proc.consumeProcessOutput(System.out, System.err)
        dump_dbs_proc.waitForOrKill(timeout * 1000)

        // stop the containers
        (dockerBinary + ['stop', 'gradle_couchdb']).execute().consumeProcessOutput(System.out, System.err)
        (dockerBinary + ['stop', 'gradle_ansible']).execute().consumeProcessOutput(System.out, System.err)
    }
}

/**
 * Copies the generated dump files from DB
 */
task dumpDB(type: Copy) {
    println 'Getting db dump from ' + tmp_src
    from tmp_src
    include 'couchdb_*.json'
    into 'import'
}

dumpDB.dependsOn exportCleanDB
distDocker.dependsOn dumpDB

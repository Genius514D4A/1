apply plugin: 'scala'
apply plugin: 'eclipse'
compileTestScala.options.encoding = 'UTF-8'

repositories {
    mavenCentral()
}

analyzeTestClassesDependencies {
    justWarn = true
}

tasks.withType(Test) {
    systemProperties(System.getProperties())

    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
    outputs.upToDateWhen { false } // force tests to run every time
}

task testLean(type: Test) {
    exclude '**/*Swift*'
    exclude '**/*Python*'
    exclude '**/*Java*'
    exclude '**/*ThrottleTests*'
    exclude '**/MaxActionDurationTests*'
    exclude '**/*ApiGwTests*'
    exclude '**/*Cli*'
}

task testLeanCli(type: Test) {
    exclude '**/*Swift*'
    exclude '**/*Python*'
    exclude '**/*Java*'
    exclude '**/*ThrottleTests*'
    exclude '**/MaxActionDurationTests*'
    exclude '**/*ApiGwTests*'
    exclude '**/*Rest*'
}

// Add all images needed for local testing here
test.dependsOn([
    ':actionRuntimes:nodejs6Action:distDocker',
    ':actionRuntimes:actionProxy:distDocker',
    ':actionRuntimes:pythonAction:distDocker',
    ':actionRuntimes:python2Action:distDocker',
    ':actionRuntimes:javaAction:distDocker',
    ':actionRuntimes:swift3.1.1Action:distDocker',
    ':sdk:docker:distDocker',
    ':tests:dat:blackbox:badaction:distDocker',
    ':tests:dat:blackbox:badproxy:distDocker'
])

dependencies {
    testCompile "org.scala-lang:scala-library:${gradle.scala.major}.${gradle.scala.minor}.${gradle.scala.patch}"
    testCompile project(':common:scala')
    testCompile project(':core:controller')
    testCompile project(':core:invoker')

    testCompile "io.spray:spray-json_${gradle.scala.major}.${gradle.scala.minor}:${gradle.spray_json.version}"

    testCompile "com.typesafe.akka:akka-actor_${gradle.scala.major}.${gradle.scala.minor}:${gradle.akka.version}"
    testCompile "com.typesafe.akka:akka-stream_${gradle.scala.major}.${gradle.scala.minor}:${gradle.akka.version}"
    testCompile "com.typesafe.akka:akka-http_${gradle.scala.major}.${gradle.scala.minor}:${gradle.akka_http.version}"
    testCompile "com.typesafe.akka:akka-http-core_${gradle.scala.major}.${gradle.scala.minor}:${gradle.akka_http.version}"
    testCompile "com.typesafe.akka:akka-http-spray-json_${gradle.scala.major}.${gradle.scala.minor}:${gradle.akka_http.version}"

    testCompile "org.apache.kafka:kafka-clients:${gradle.kafka.version}"

    testCompile 'junit:junit:4.11'
    testCompile "org.scalatest:scalatest_${gradle.scala.major}.${gradle.scala.minor}:3.0.1"
    testCompile "org.scalactic:scalactic_${gradle.scala.major}.${gradle.scala.minor}:3.0.1"
    testCompile "org.scalamock:scalamock-core_${gradle.scala.major}.${gradle.scala.minor}:3.4.2"
    testCompile "org.scalamock:scalamock-scalatest-support_${gradle.scala.major}.${gradle.scala.minor}:3.4.2"
    testCompile "com.typesafe.akka:akka-testkit_${gradle.scala.major}.${gradle.scala.minor}:${gradle.akka.version}"
    testCompile "com.typesafe.akka:akka-http-testkit_${gradle.scala.major}.${gradle.scala.minor}:${gradle.akka_http.version}"

    testCompile 'com.typesafe:config:1.3.1'
    testCompile "com.typesafe:ssl-config-core_${gradle.scala.major}.${gradle.scala.minor}:0.2.2"

    testCompile 'org.apache.httpcomponents:httpcore:4.4.6'
    testCompile 'commons-io:commons-io:2.4'
    testCompile "org.apache.kafka:kafka-clients:${gradle.kafka.version}"

    testCompile 'org.apache.commons:commons-lang3:3.3.2'
    testCompile 'org.apache.httpcomponents:httpclient:4.5.2:tests'
    testCompile 'com.jayway.restassured:rest-assured:2.6.0'
    testCompile 'com.google.code.gson:gson:2.3.1'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.2.3'
    testCompile 'com.github.java-json-tools:json-schema-core:1.2.8'
    testCompile 'com.github.java-json-tools:json-schema-validator:2.2.8'
}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = gradle.scala.compileFlags
}

def keystorePath = new File(sourceSets.test.scala.outputDir, 'keystore')
task deleteKeystore(type: Delete) {
    delete keystorePath
}
task createKeystore(dependsOn: deleteKeystore) {
    doLast {
        Properties props = new Properties()
        props.load(new FileInputStream(file('../whisk.properties')))
        def cmd = ['keytool', '-import', '-alias', 'Whisk', '-noprompt', '-trustcacerts', '-file', file(props['whisk.ssl.cert']), '-keystore', keystorePath, '-storepass', 'openwhisk']
        cmd.execute().waitForProcessOutput(System.out, System.err)
    }
}
compileTestScala.finalizedBy createKeystore
